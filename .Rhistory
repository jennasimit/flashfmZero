install.packages("~/Desktop/Rpackages/flashfm-master.zip", repos = NULL, type = "win.binary")
remotes::install_github("jennasimit/flashfm")
remotes::install_github("jennasimit/flashfm")
q()
remotes::install_github("jennasimit/flashfm")
remotes::install_github("jennasimit/flashfm")
q()
library(R2BGLiMS)
library(MGflashfm)
save.path="/Users/jennifer/Desktop/tmpDIR"
FLASHFMwithJAMd
gwas.list=gwas.list[[1]]
corX=corX.list[[1]]
N=Nall[[1]]]
N=Nall[[1]]
covY.list
covY=covY.list[[1]]
TOdds = 1
cpp = 0.99
NCORES=2
jam.nM.iter = 1
maxcv = 1; maxcv_stop = 20; maxcv_autocheck = TRUE
ybar=c(0,0)
M <- length(ybar)
if (M > 6 | M < 2)
stop("Need at least 2 and at most 6 traits.")
Vy <- diag(covY)
corX <- as.matrix(corX)
if (!dir.exists(save.path)) {
message(c("Directory ", save.path, " does not exist. Creating directory ",
save.path))
dir.create(save.path)
}
tmpdir <- paste0(save.path, "/tmp", sample(1:1000, 1))
dir.create(tmpdir)
main.input <- JAMmulti2(gwas.list, corX, ybar, Vy, N, r2 = 0.99,
save.path, maxcv = maxcv, maxcv_stop = maxcv_stop, maxcv_autocheck = maxcv_autocheck,
jam.nM.iter = jam.nM.iter)
JAMmulti2 <- MGflashfm:::JAMmulti2
main.input <- JAMmulti2(gwas.list, corX, ybar, Vy, N, r2 = 0.99,
save.path, maxcv = maxcv, maxcv_stop = maxcv_stop, maxcv_autocheck = maxcv_autocheck,
jam.nM.iter = jam.nM.iter)
gc(verbose = FALSE)
ss.stats <- summaryStats(Xmat = FALSE, ybar.all = ybar, main.input = main.input)
ss.stats <- flashfm:::summaryStats(Xmat = FALSE, ybar.all = ybar, main.input = main.input)
is.snpmat=F
min.mppi = 0.01;minsnpmppi=0.001;r2.minmerge=0.5
snp.data <- main.input$Gmat
M <- length(fm.multi$PP)
fm.multi <- flashfmU(main.input, TOdds = TOdds, covY,
ss.stats, cpp = cpp, maxmod = NULL, fastapprox = FALSE,
NCORES = NCORES)
fm.multi <- MGflashfm:::flashfmU(main.input, TOdds = TOdds, covY,
ss.stats, cpp = cpp, maxmod = NULL, fastapprox = FALSE,
NCORES = NCORES)
snp.data <- main.input$Gmat
M <- length(fm.multi$PP)
#SMlist <- main.input$SM
#if(is.snpmat) { Xmat <- new("SnpMatrix",round(snp.data+1))
#} else {Xmat <- as.matrix(snp.data) }
SMlist <- vector("list",M)
fmpp  <- fm.multi$PP
for(i in 1:M) {
ppdf <- data.frame(str=as.character(rownames(fmpp[[i]])),PP=fmpp[[i]][,1], stringsAsFactors = FALSE)
SMlist[[i]] <- PP2snpmod(ppdf)
}
snp.data <- main.input$Gmat
M <- length(fm.multi$PP)
#SMlist <- main.input$SM
#if(is.snpmat) { Xmat <- new("SnpMatrix",round(snp.data+1))
#} else {Xmat <- as.matrix(snp.data) }
SMlist <- vector("list",M)
fmpp  <- fm.multi$PP
for(i in 1:M) {
ppdf <- data.frame(str=as.character(rownames(fmpp[[i]])),PP=fmpp[[i]][,1], stringsAsFactors = FALSE)
SMlist[[i]] <- flashfm:::PP2snpmod(ppdf)
}
Xmat <- as.matrix(snp.data)
stopifnot(is.list(SM2))
SM2=SMlist
stopifnot(is.list(SM2))
M <- length(SM2)
dd <- vector("list",M)
if(is(SM2[[1]], "snpmod")) {
nsnps <- ncol(snp.data)
s <- lapply(SM2,function(x) x@snps$var)
es <- lapply(s,function(s,snps) setdiff(snps,s),snps=colnames(snp.data))
for(j in 1:M) {
if(length(es[[j]])>0){
esmods <- data.frame(str=es[[j]],PP=0,stringsAsFactors = FALSE)
dd[[j]] <- rbind(SM2[[j]]@models[,c("str","PP")],esmods)
rownames(dd[[j]]) <- dd[[j]]$str
SM2[[j]] <- PP2snpmod(dd[[j]])
}
}
}
PP2snpmod <- flashfm:::PP2snpmod
stopifnot(is.list(SM2))
M <- length(SM2)
dd <- vector("list",M)
if(is(SM2[[1]], "snpmod")) {
nsnps <- ncol(snp.data)
s <- lapply(SM2,function(x) x@snps$var)
es <- lapply(s,function(s,snps) setdiff(snps,s),snps=colnames(snp.data))
for(j in 1:M) {
if(length(es[[j]])>0){
esmods <- data.frame(str=es[[j]],PP=0,stringsAsFactors = FALSE)
dd[[j]] <- rbind(SM2[[j]]@models[,c("str","PP")],esmods)
rownames(dd[[j]]) <- dd[[j]]$str
SM2[[j]] <- PP2snpmod(dd[[j]])
}
}
}
bs <- best.snps(SM2, pp.thr = 0)
bs <- flashfm:::best.snps(SM2, pp.thr = 0)
bs
if(length(snps) == 1) {
snpGroups <- list(A=snps)
out <- snpGroups
}
snps <- setdiff(unique(bs[bs$Marg_Prob_Incl > minsnpmppi, ]$var),
"1")
bs <- do.call("rbind", bs)
bs
snps <- setdiff(unique(bs[bs$Marg_Prob_Incl > minsnpmppi, ]$var),
"1")
snps
if(length(snps) == 1) {
snpGroups <- list(A=snps)
out <- snpGroups
}
if(length(snps) == 0) {
minsnpmppi = 0
min.mppi = 0
snps <- setdiff(unique(bs[bs$Marg_Prob_Incl > minsnpmppi, ]$var), "1")
}
if(length(snps) == 1) {
snpGroups <- list(A=snps)
out <- snpGroups
}
length(snps)
snp.data <- snp.data[snps,snps]
r2 <- cov2cor(as.matrix(snp.data))^2
s <- lapply(dd, function(x) rownames(dd))
es <- lapply(s,function(s,snps) setdiff(snps,s),snps=snps) # prioritised snps not among models for a trait
X <- lapply(SM2, makex)
X <- lapply(SM2, flashfm:::makex)
mppi <- lapply(X, flashfm:::makemppi)
mppi
MPPI <- do.call("smartbind",c(lapply(mppi,function(m) {mm <- matrix(m,nrow=1); colnames(mm) <- names(m); return(mm)}),fill=0))
library(gtools)
MPPI <- do.call("smartbind",c(lapply(mppi,function(m) {mm <- matrix(m,nrow=1); colnames(mm) <- names(m); return(mm)}),fill=0))
MPPI <- t(MPPI)
dim(MPPI)
head(MPPI)
R <- lapply(X, function(x) maker(x)[snps, snps])
R <- lapply(X, function(x) flashfm:::maker(x)[snps, snps])
R
flashfm:::maker
X[[1]][snps,snps]
length(X)
dim(X[[1]])
head(X[[1]])
head(X[[2]])
R
R <- lapply(X, function(x) maker(x)[snps, snps])
R <- lapply(X, function(x) flashfm:::maker(x)[snps, snps])
R
rmax <- rmin <- R[[1]]
if (length(R) > 1)
for (i in 2:length(R)) rmin <- pmin(rmin, R[[i]])
rmax <- R[[1]]
if (length(R) > 1)
for (i in 2:length(R)) rmax <- pmax(rmax, R[[i]])
r <- ifelse(abs(rmin) > abs(rmax), rmin, rmax)
r
rd <- flashfm:::maked(r, r2)
rd
h <- hclust(rd, method = "complete")
d <- as.dendrogram(h)
r.tol = max(c(quantile(r, 0.9),0))
## utility functions in local environment
mem.sum <- function(members) {
(colSums(MPPI[members, , drop = FALSE]))
}
mem.marg <- function(members) {
sapply(X, function(x) {
sum(pmin(apply(x$x[, members, drop = FALSE], 1, sum),
1) * x$w)
})
}
mem.ab <- function(members) {
list(a = mem.sum(members), b = mem.marg(members))
}
obj.ab <- function(object) {
members <- labels(object)
mem.ab(members)
}
mem.maxr.minr2 <- function(members) {
r.sub <- r[members, members, drop = FALSE]
r2.sub <- r2[members, members, drop = FALSE]
mx <- max(r.sub[lower.tri(r.sub)], na.rm = TRUE)
mn <- min(r2.sub[upper.tri(r2.sub)], na.rm = TRUE)
c(mx, mn)
}
cutter <- function(object, mppi.max = 1.01, max.size = 50,
marg.sum.ratio = 1.1, max.r = 0, min.r2 = 0.5) {
if (is.leaf(object))
return(labels(object))
members <- labels(object)
ab <- mem.ab(members)
if (max(ab[[1]]) < min.mppi)
return(labels(object))
if (max(ab[[1]]) > mppi.max)
return(list(cutter(object[[1]],min.r2 =min.r2), cutter(object[[2]],min.r2 =min.r2)))
mxmn <- mem.maxr.minr2(members)
if (mxmn[1] > r.tol || mxmn[2] < min.r2)
return(list(cutter(object[[1]],min.r2 =min.r2), cutter(object[[2]],min.r2 =min.r2)))
if (min(c(mem.sum(labels(object[[1]])), mem.sum(labels(object[[2]]))) <
min.mppi))
return(list(cutter(object[[1]],min.r2 =min.r2), cutter(object[[2]],min.r2 =min.r2)))
if (max(ab[[1]]) <= mppi.max & all(ab[[1]] < ab[[2]] *
marg.sum.ratio))
return(labels(object))
return(list(cutter(object[[1]],min.r2 =min.r2), cutter(object[[2]],min.r2 =min.r2)))
}
mem.summ <- function(members) {
n <- length(members)
ab <- mem.ab(members)
mppi.min <- apply(MPPI[members, , drop = FALSE], 2, min)
mppi.max <- apply(MPPI[members, , drop = FALSE], 2, max)
r2.sub <- r2[members, members]
r2.summ <- summary(r2.sub[upper.tri(r2.sub)])
r.sub <- r[members, members]
r.summ <- summary(r.sub[upper.tri(r.sub)])
c(n = n, sum.mppi = ab[[1]], r2 = r2.summ["Min."], r2 = r2.summ["Max."],
r = r.summ["Min."], r = r.summ["Max."], mppi.min = mppi.min,
mppi.max = mppi.max)
}
ret <- cutter(d,min.r2=r2.minmerge)
if (!is.list(ret))
ret <- list(ret)
ret <- LinearizeNestedList(ret)
ret <- flashfm:::LinearizeNestedList(ret)
d
object=d
members <- labels(object)
ab <- mem.ab(members)
ab
mem.ab
mem.sum(members)
members
mem.marg(members)
mem.sum
MPPI[members, , drop = FALSE]
mem.marg(members)
mem.marg
ret
FLASHFMwithJAMd()
FLASHFMwithJAMd
ppdf
flashfm:::MPP.fn(ppdf)
flashfm:::MPP.fn
MGflashfm:::MPPcalc
MGflashfm:::MPPcalc(ppdf)
ppdf
PPdf <- ppdf[,"PP"]
PPdf
PPdf <- ppdf[,"PP",,drop=F]
PPdf <- ppdf[,"PP",drop=F]
PPdf
MGflashfm:::MPPcalc(PPdf)
fm.multi$MPP
fm.multi$PP
fm.multi$PP[[1]][,1,drop=F]
pp1 <- fm.multi$PP[[1]][,1,drop=F]
MGflashfm:::MPPcalc(pp1)
fm.multi$MPP[[1]][,1,drop=F]
fm.multi$MPP[[1]]
fm.multi$MPP
fm.multi$PP
ls()
FLASHFMwthJAMd
MGflashfm:::FLASHFMwthJAMd
MGflashfm::FLASHFMwthJAMd
MGflashfm::FLASHFMwithJAMd
snpGroups <- makeSNPgroups2U(main.input, fm.multi, is.snpmat = FALSE,
min.mppi = 0.01, minsnpmppi = 0.01, r2.minmerge = 0.6)
mpp.pp <- PPsummarise(fm.multi, snpGroups, minPP = 0.01)
mpp.pp <- flashfm:::PPsummarise(fm.multi, snpGroups, minPP = 0.01)
mpp.pp$MPP
MGflashfm:::MPPcalc(pp1)
fm.multi$MPP
flashfm:::PPsummarise
i=1
fm.multi$PP[[i]][, 1]
ppdf
ppdf$PP
ppdf[,1]
ppdf[,2]
PPdf
PPdf$PP
PPmodGroups
flashfm:::PPmodGroups
fm.multi$PP[[i]]
fm.multi$PP[[i]][,1]
ppdf
ppdf[,2]
MPP <- fm.multi$MPP
pp <- fm.multi$PP
M <- length(pp)
snpgroups <- snpGroups[[1]]
snpgroups2 <- snpGroups[[2]]
tnames <- names(fm.multi$PP)
PPout <- PPout2 <- outPPg <- outPP <- vector("list", M)
MPPout <- MPPout2 <- outMPPg <- outMPP <- vector("list",
M)
i
PPout[[i]] <- PPmodGroups(fm.multi$PP[[i]][, 1], snpgroups,
minPP = 0)
PPout[[i]] <- flashfm:::PPmodGroups(fm.multi$PP[[i]][, 1], snpgroups,minPP = 0)
PPout[[i]]
t(data.frame(PPout[[i]]$group[, 2], row.names = rownames(PPout[[i]]$group)))
data.frame(PPout[[i]]$group[, 2], row.names = rownames(PPout[[i]]$group))
mpp.pp
flashfm::groupIDs.fn
JAMdynamic
q()
library(MGflashfm)
library(R2BGLiMS)
T1gwas.list <- list(gwas.list[[1]][[1]], gwas.list[[2]][[1]])
N1all <- sapply(Nall,function(x) x[1])
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=1, maxcv_stop = 20, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
save.path="/Users/jennifer/Desktop/tmpDIR"
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=1, maxcv_stop = 20, maxcv_autocheck = FALSE,NCORES=2,jam.nM.iter=1)
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=1, maxcv_stop = 20, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=2, maxcv_stop = 2, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=2, maxcv_stop = 2, maxcv_autocheck = FALSE,NCORES=2,jam.nM.iter=1)
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=2, maxcv_stop = 3, maxcv_autocheck = FALSE,NCORES=2,jam.nM.iter=1)
MGFMwithJAM
MGflashfm:::JAMcor.tries.maxcv
MGflashfm:::JAMexpandedCor2
MGflashfm:::JAM.tries.maxcv
JAMdynamic
g2t1CS <- JAMdynamic(gwas=gwas.list[[2]][[1]],corX=corX.list[[2]], ybar=0, Vy=1, N=Nall[[2]][1], cred=.99, save.path=save.path, maxcv=1, maxcv_stop = 20, maxcv_autocheck = TRUE,jam.nM.iter=1)
g2t1CS <- JAMdynamic(gwas=gwas.list[[2]][[1]],corX=corX.list[[2]], ybar=0, Vy=1, N=Nall[[2]][1], cred=.99, save.path=save.path, maxcv=2, maxcv_stop = 2, maxcv_autocheck = FALSE,jam.nM.iter=1)
g2t1CS <- JAMdynamic(gwas=gwas.list[[2]][[1]],corX=corX.list[[2]], ybar=0, Vy=1, N=Nall[[2]][1], cred=.99, save.path=save.path, maxcv=2, maxcv_stop = 2, maxcv_autocheck = TRUE,jam.nM.iter=1)
g2t1CS
JAMdynamic
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=2, maxcv_stop = 3, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=3, maxcv_stop = 4, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=3, maxcv_stop = 4, maxcv_autocheck = FALSE,NCORES=2,jam.nM.iter=1)
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=2, maxcv_stop = 3, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
cvs
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=3, maxcv_stop = 3, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
g2t1CS <- JAMdynamic(gwas=gwas.list[[2]][[1]],corX=corX.list[[2]], ybar=0, Vy=1, N=Nall[[2]][1], cred=.99, save.path=save.path, maxcv=1, maxcv_stop = 2, maxcv_autocheck = TRUE,jam.nM.iter=1)
g2t1CS <- JAMdynamic(gwas=gwas.list[[2]][[1]],corX=corX.list[[2]], ybar=0, Vy=1, N=Nall[[2]][1], cred=.99, save.path=save.path, maxcv=2, maxcv_stop = 3, maxcv_autocheck = TRUE,jam.nM.iter=1)
g2t1CS <- JAMdynamic(gwas=gwas.list[[2]][[1]],corX=corX.list[[2]], ybar=0, Vy=1, N=Nall[[2]][1], cred=.99, save.path=save.path, maxcv=2, maxcv_stop = 4, maxcv_autocheck = TRUE,jam.nM.iter=1)
g2t1CS
cvs
g2t1CS <- JAMdynamic(gwas=gwas.list[[2]][[1]],corX=corX.list[[2]], ybar=0, Vy=1, N=Nall[[2]][1], cred=.99, save.path=save.path, maxcv=4, maxcv_stop = 4, maxcv_autocheck = TRUE,jam.nM.iter=1)
g2t1CS
q()
library(MGflashfm)
library(R2BGLiMS)
save.path="/Users/jennifer/Desktop/tmpDIR"
T1gwas.list <- list(gwas.list[[1]][[1]], gwas.list[[2]][[1]])
N1all <- sapply(Nall,function(x) x[1])
# Set NCORES=no. of groups, if on non-Windows machine. If on Windows, set NCORES=1.
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path,cpp=0.99,cred=0.99, maxcv=1, maxcv_stop = 20, maxcv_autocheck = TRUE,NCORES=2,jam.nM.iter=1)
mgCS1
library(MGflashfm)
#' Group 1 multi-trait fine-mapping with flashfm
mtg1 <- FLASHFMwithJAMd(gwas.list[[1]], corX.list[[1]], ybar=c(0,0), Nall[[1]], save.path, TOdds = 1,
covY.list[[1]], cpp = 0.99, NCORES=2, maxcv=1, maxcv_stop = 20,jam.nM.iter=1, extra.java.arguments=NULL)
save.path="/Users/jennifer/Desktop/tmpDIR"
#' Group 1 multi-trait fine-mapping with flashfm
mtg1 <- FLASHFMwithJAMd(gwas.list[[1]], corX.list[[1]], ybar=c(0,0), Nall[[1]], save.path, TOdds = 1,
covY.list[[1]], cpp = 0.99, NCORES=2, maxcv=1, maxcv_stop = 20,jam.nM.iter=1, extra.java.arguments=NULL)
library(R2BGLiMS)
#' Group 1 multi-trait fine-mapping with flashfm
mtg1 <- FLASHFMwithJAMd(gwas.list[[1]], corX.list[[1]], ybar=c(0,0), Nall[[1]], save.path, TOdds = 1,
covY.list[[1]], cpp = 0.99, NCORES=2, maxcv=1, maxcv_stop = 20,jam.nM.iter=1, extra.java.arguments=NULL)
mtg1CS <- allcredsetsPP(mtg1$mpp.pp,cred=.99)
#' Group 2 multi-trait fine-mapping with flashfm
mtg2 <- FLASHFMwithJAMd(gwas.list[[2]], corX.list[[2]], ybar=c(0,0), Nall[[2]], save.path, TOdds = 1,
covY.list[[2]], cpp = 0.99, NCORES=2, maxcv=1, maxcv_stop = 20,jam.nM.iter=1, extra.java.arguments=NULL)
mtg2CS <- allcredsetsPP(mtg2$mpp.pp,cred=.99)
mgCS1 <- MGfm(stfm.list,isnps,N,cred=.99,cpp=0.99)
T1gwas.list <- list(gwas.list[[1]][[1]], gwas.list[[2]][[1]])
N1all <- sapply(Nall,function(x) x[1])
# Set NCORES=no. of groups, if on non-Windows machine. If on Windows, set NCORES=1.
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path, cpp=0.99, cred=0.99, maxcv=1, maxcv_stop = 20,
NCORES=2, jam.nM.iter=1, extra.java.arguments=NULL)
mgmtCS <- MGFLASHFMwithJAM(gwas.list, LD.list=corX.list, covY.list, Nall, multi=TRUE, TOdds=1, maxcv=1,
maxcv_stop = 20, save.path, cpp=0.99, cred=0.99,NCORES=2,jam.nM.iter=1,flashfmRET=TRUE, extra.java.arguments=NULL)
mgmtCS
mgmtCS$CSsummary
cvs
mgmtCS$flashfm.out[[1]]
mgmtCS$flashfm.out[[2]]
mgmtCS$flashfm.out[[2]]$mpp.pp$MPP
mgmtCS$flashfm.out[[1]]$mpp.pp$MPP
mgmtCS$CSsummary
T1gwas.list <- list(gwas.list[[1]][[1]], gwas.list[[2]][[1]])
N1all <- sapply(Nall,function(x) x[1])
# Set NCORES=no. of groups, if on non-Windows machine. If on Windows, set NCORES=1.
mgCS1 <- MGFMwithJAM(T1gwas.list, corX.list,  N1all, save.path, cpp=0.99, cred=0.99, maxcv=1, maxcv_stop = 20,
NCORES=2, jam.nM.iter=1, extra.java.arguments=NULL)
mgCS1
T2gwas.list <- list(gwas.list[[1]][[2]], gwas.list[[2]][[2]])
N2all <- sapply(Nall,function(x) x[2])
# Set NCORES=no. of groups, if on non-Windows machine. If on Windows, set NCORES=1.
mgCS2 <- MGFMwithJAM(T2gwas.list, corX.list,  N2all, save.path, cpp=0.99, cred=0.99, maxcv=1, maxcv_stop = 20,
NCORES=2, jam.nM.iter=1, extra.java.arguments=NULL)
mgCS2$CSsummary
mgCS1$CSsummary
mgmtCS$CSsummary
nrow(mgCS1$CSsummary)
nrow(mgCS2$CSsummary)
lapply(mgmtCS$CSsummary,nrow)
q()
devtools::install_github(`baolinwu/MTAR')
library(MTAR)
library(MASS)
## simulate Z-stat and average LD scores
Zs = matrix(rnorm(1e4*2),1e4,2)*sqrt(0.5) + rnorm(1e4)*sqrt(0.5)
r2 = rchisq(1e4,1)/1e6
## overlapped GWAS based on n=1e4 samples
N1 = N2 = Nc = 1e4
GCvr(Zs,r2,N1,N2,Nc)
library(MTAR)
library(MFM)
remotes::install_github("jennasimit/MFM")
setwd("/Users/jennifer/Desktop/Rpackages/flashfmZero")
library(flashfmZero)
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
setwd("/Users/jennifer/Desktop/Rpackages/flashfmZero")
library(devtools)
document()
check()
build()
build_vignettes()
pkgdown::build_articles()
install_github("jennasimit/flashfmZero")
install.packages("/Users/jennifer/Desktop/Rpackages/flashfmZero_0.0.1.tar.gz",source=T)
library(flashfmZero)
pkgdown::build_articles()
pkgdown::clean_site()
pkgdown::build_site()
q()
